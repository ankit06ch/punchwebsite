"use client";
import { useEffect, useMemo, useRef, useState } from "react";
import Link from "next/link";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth, db, storage } from "@/app/firebase";
import OnboardRestaurant from "@/components/OnboardRestaurant";
import { useRouter } from "next/navigation";
import { addDoc, collection } from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";

export default function SignUp() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [showOnboard, setShowOnboard] = useState(false);
  const [pendingAccount, setPendingAccount] = useState<{ email: string; password: string; name: string; phone: string } | null>(null);
  const router = useRouter();

  // Friendly rotating messages with a simple typewriter effect
  const messages = useMemo(
    () => [
      "Our rewards are loadingâ€¦ unlike your laundry, these points fold themselves.",
      "Patience paysâ€¦ literally. Points incoming!",
      "Good things take timeâ€¦ great rewards take just a few seconds more.",
      "Weâ€™re cooking up your pointsâ€¦ they smell like free coffee.",
      "Your loyalty points are doing a victory lap before arriving.",
      "Almost thereâ€¦ just bribing the server with cookies.",
      "Loadingâ€¦ because instant gratification isnâ€™t as fun.",
      "Hang tightâ€¦ our hamsters are running as fast as they can.",
      "Please waitâ€¦ your rewards are finding a Wiâ€‘Fi signal.",
      "Progress bar sponsored by your patience.",
    ],
    []
  );
  const [typed, setTyped] = useState("");
  const [msgIndex, setMsgIndex] = useState(0);
  const [phase, setPhase] = useState<"typing" | "pausing" | "deleting">("typing");
  const typingRef = useRef<number | null>(null);

  useEffect(() => {
    if (!loading) {
      // Reset when not loading
      setTyped("");
      setMsgIndex(0);
      setPhase("typing");
      if (typingRef.current) cancelAnimationFrame(typingRef.current);
      return;
    }

    const current = messages[msgIndex % messages.length];

    const tick = () => {
      if (phase === "typing") {
        if (typed.length < current.length) {
          setTyped(current.slice(0, typed.length + 1));
          typingRef.current = requestAnimationFrame(tick);
        } else {
          setPhase("pausing");
          setTimeout(() => setPhase("deleting"), 1200);
        }
      } else if (phase === "deleting") {
        if (typed.length > 0) {
          setTyped(current.slice(0, typed.length - 1));
          typingRef.current = requestAnimationFrame(tick);
        } else {
          setMsgIndex((i) => (i + 1) % messages.length);
          setPhase("typing");
          typingRef.current = requestAnimationFrame(tick);
        }
      }
    };

    typingRef.current = requestAnimationFrame(tick);
    return () => {
      if (typingRef.current) cancelAnimationFrame(typingRef.current);
    };
  }, [loading, typed, phase, msgIndex, messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    // Do NOT create user yet; move to onboarding first
    setPendingAccount({ email, password, name, phone });
    setShowOnboard(true);
  };

  const handleOnboardingComplete = async (restaurantValues: any) => {
    if (!pendingAccount) return;
    setLoading(true);
    setError("");
    try {
      // 1) Create the auth user now that onboarding is done
      const cred = await createUserWithEmailAndPassword(auth, pendingAccount.email, pendingAccount.password);

      // 2) If a logo file was selected, upload it now with authenticated user
      let finalLogoUrl = restaurantValues.logoUrl || "";
      if (restaurantValues.logoFile) {
        const file: File = restaurantValues.logoFile as File;
        const ext = file.name.split(".").pop() || "png";
        const path = `business-logos/${cred.user.uid}/logo_${Date.now()}.${ext}`;
        const fileRef = ref(storage, path);
        const snap = await uploadBytes(fileRef, file, { contentType: file.type });
        finalLogoUrl = await getDownloadURL(snap.ref);
      }

      // 3) Persist restaurant document with owner UID and collected values
      const { logoFile, ...restValues } = restaurantValues || {};
      const docData: any = {
        ...restValues,
        logoUrl: finalLogoUrl,
        owner: cred.user.uid,
        ownerName: pendingAccount.name,
        ownerPhone: pendingAccount.phone,
        createdAt: new Date(),
      };
      Object.keys(docData).forEach((k) => {
        if (docData[k] === undefined) delete docData[k];
      });
      await addDoc(collection(db, "restaraunts"), docData);

      // 4) Navigate to dashboard
      router.push("/dashboard");
    } catch (err: any) {
      setError(err.message || "Failed to create account");
      setShowOnboard(false);
    } finally {
      setLoading(false);
    }
  };

  if (showOnboard) {
    return (
      <div>
        <OnboardRestaurant onComplete={handleOnboardingComplete} />
        {loading && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm">
            <div className="mx-4 w-full max-w-md rounded-2xl border bg-white p-6 text-center shadow-xl">
              <div className="mb-3 flex items-center justify-center gap-3">
                <div className="h-10 w-10 animate-spin rounded-full border-2 border-gray-300 border-t-[#FB7A20]" />
                <div className="animate-bounce text-2xl">ðŸ¥Š</div>
              </div>
              <div className="mb-1 text-sm font-medium text-gray-900">Setting up your businessâ€¦</div>
              <div className="min-h-[1.5rem] text-sm text-gray-600">{typed || ""}</div>
              <div className="mt-4 text-xs text-gray-400">This usually takes just a moment.</div>
            </div>
          </div>
        )}
        {error && <div className="mt-2 text-red-600 text-sm">{error}</div>}
      </div>
    );
  }

  return (
    <div className="mx-auto w-full max-w-md">
      <div className="mb-10">
        <h1 className="text-4xl font-bold">Create your account</h1>
      </div>
      <form onSubmit={handleSubmit}>
        <div className="space-y-4">
          <div>
            <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor="name">Full name</label>
            <input id="name" className="form-input w-full py-2" type="text" placeholder="Corey Barker" required value={name} onChange={e => setName(e.target.value)} />
          </div>
          <div>
            <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor="email">Email</label>
            <input id="email" className="form-input w-full py-2" type="email" placeholder="corybarker@email.com" required value={email} onChange={e => setEmail(e.target.value)} />
          </div>
          <div>
            <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor="phone">Phone</label>
            <input id="phone" className="form-input w-full py-2" type="text" placeholder="(+750) 932-8907" required value={phone} onChange={e => setPhone(e.target.value)} />
          </div>
          <div>
            <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor="password">Password</label>
            <input id="password" className="form-input w-full py-2" type="password" autoComplete="on" placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" required value={password} onChange={e => setPassword(e.target.value)} />
          </div>
        </div>
        {error && <div className="mt-4 text-red-600 text-sm">{error}</div>}
        <div className="mt-6 space-y-3">
          <button className="btn w-full bg-[#FB7A20] text-white shadow-sm hover:bg-[#e66a1a]" type="submit" disabled={loading}>{loading ? "Registering..." : "Continue"}</button>
        </div>
      </form>
      <div className="mt-4 text-center">
        <span className="text-sm text-gray-700">Already have an account? </span>
        <Link className="text-sm text-[#FB7A20] underline hover:no-underline" href="/login">Sign in</Link>
      </div>
    </div>
  );
}
